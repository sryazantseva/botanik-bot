import logging
import os
import gspread
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# Telegram API Key
TOKEN = os.getenv("TELEGRAM_API_KEY")

# Google Sheets API
GOOGLE_SHEETS_ID = os.getenv("GOOGLE_SHEETS_ID")
SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

# OpenAI API Key
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
def connect_google_sheets():
    creds = ServiceAccountCredentials.from_json_keyfile_name("google_credentials.json", SCOPE)
    client = gspread.authorize(creds)
    return client.open_by_key(GOOGLE_SHEETS_ID)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram Bot
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("üìö –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"))
keyboard.add(KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
keyboard.add(KeyboardButton("üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏–µ"))

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ë–æ—Ç–∞–Ω–∏–∫ü§ì, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –û–ì–≠/–ï–ì–≠! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ üìö –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
@dp.message_handler(lambda message: message.text == "üìö –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
async def start_test(message: types.Message):
    sheet = connect_google_sheets().worksheet("–¢–µ—Å—Ç—ã")
    questions = sheet.get_all_records()
    if not questions:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.")
        return
    question = questions[0]
    await message.answer(f"{question['–í–æ–ø—Ä–æ—Å']}\n1Ô∏è‚É£ {question['–í–∞—Ä–∏–∞–Ω—Ç 1']}\n2Ô∏è‚É£ {question['–í–∞—Ä–∏–∞–Ω—Ç 2']}\n3Ô∏è‚É£ {question['–í–∞—Ä–∏–∞–Ω—Ç 3']}")

# –ö–æ–º–∞–Ω–¥–∞ üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message_handler(lambda message: message.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    await message.answer("–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º! üöÄ")

# –ö–æ–º–∞–Ω–¥–∞ üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏–µ
@dp.message_handler(lambda message: message.text == "üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏–µ")
async def check_essay(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—ë —Å–æ—á–∏–Ω–µ–Ω–∏–µ, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å! ‚úç")

@dp.message_handler(content_types=types.ContentType.TEXT)
async def process_essay(message: types.Message):
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": message.text}]
    )
    reply = response["choices"][0]["message"]["content"]
    await message.answer(f"üìã –†–∞–∑–±–æ—Ä —Ç–≤–æ–µ–≥–æ —Å–æ—á–∏–Ω–µ–Ω–∏—è:\n{reply}")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
